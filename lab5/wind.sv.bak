module wind (clk, reset, w, out);
input logic clk, reset, w;
output logic out;
// State variables
enum { calm, R2L, L2R } ps, ns;
// Next State logic
always_comb begin
case (ps)

calm: if (w ==0 ) ns = calm;
else if(w == 1) ns = R2L;
else ns = L2R;

R2L: if (w ==0 ) ns = calm;
else if(w == 1) ns = R2L;
else ns = L2R;

L2R: if (w ==0 ) ns = calm;
else if(w == 1) ns = R2L;
else ns = L2R;

endcase
end
	
// Output logic - could also be another always_comb block.
assign out = ns;
// DFFs
always_ff @(posedge clk) begin
if (reset)
ps <= calm;
else
ps <= ns;
end
endmodule

module wind_testbench();
logic clk, reset, w;
logic out;
wind dut (clk, reset, w, out);
// Set up a simulated clock.
parameter CLOCK_PERIOD=100;
initial begin
clk <= 0;
forever #(CLOCK_PERIOD/2) clk <= ~clk; // Forever toggle the clock
end
// Set up the inputs to the design. Each line is a clock cycle.
initial begin

@(posedge clk);

reset <= 1; @(posedge clk); // Always reset FSMs at start
reset <= 0; w <= 0; @(posedge clk);
@(posedge clk);
@(posedge clk);
@(posedge clk);
w <= 1; @(posedge clk);
w <= 0; @(posedge clk);
w <= 1; @(posedge clk);
@(posedge clk);
@(posedge clk);
@(posedge clk);
w <= 0; @(posedge clk);
@(posedge clk);
$stop; // End the simulation.
end
endmodule